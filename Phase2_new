import numpy as np
from queue import PriorityQueue
import time
from datetime import datetime
import pygame
import sys
import json


def valid_point(x, y, radius, clear):
    d = radius+clear
    # Check if inside the bounding box
    inside_box = d <= x <= 600 - d and d <= y <= 200 - d

    # Check if outside rectangle 1
    outside_rectangle_1 = not (150 - d < x < 175 + d and y > 100 - d)

    # Check if outside rectangle 2
    outside_rectangle_2 = not (250 - d < x < 275 + d and y < 100 + d)

    # Check if outside circle
    distance_to_circle_center = ((x - 420)**2 + (y - 120)**2) ** 0.5
    outside_circle = distance_to_circle_center > (60+d)

    # Combine all conditions
    return inside_box and outside_rectangle_1 and outside_rectangle_2 and outside_circle



def move_star(node, wheel_rpms, radius, clear, wheel_radius, wheel_distance):
    RPM1 = wheel_rpms[0]
    RPM2 = wheel_rpms[1]
    action_set = [[RPM1, RPM1], [RPM2,RPM2],[RPM1, RPM2], [RPM2, RPM1], [0,RPM1], [RPM1,0], [0,RPM2], [RPM2,0]] #Differential Drive Action Set
    newNodes = [] 

    for rpms in action_set:
        result = cost(node, rpms, radius, wheel_radius, wheel_distance, clear)
        if result is not None:
            newNode, moveCost = result
            newNodes.append((newNode, moveCost, rpms))
    return newNodes


def cost(node, rpms, radius, wheel_radius,wheel_distance,clear):
    t = 0
    dt = 0.1
    current_node_x = node[0]
    current_node_y = node[1]
    current_node_theta = node[2] * 30
    current_node_theta = np.radians(current_node_theta)
    C2G = 0.0
    newNode_x = current_node_x
    newNode_y = current_node_y
    newNode_theta = current_node_theta
    
    while t < 1:
        t+=dt
        Delta_x = 0.5 * wheel_radius * (rpms[0] + rpms[1]) * np.cos(newNode_theta) * dt
        Delta_y = 0.5 * wheel_radius * (rpms[0] + rpms[1]) * np.sin(newNode_theta) * dt
        Delta_theta = (wheel_radius/wheel_distance)*(rpms[0] - rpms[1])*dt

        newNode_x += Delta_x
        newNode_y += Delta_y
        newNode_theta += Delta_theta

        C2G = C2G + np.sqrt((Delta_x)**2 + (Delta_y)**2)

        if not valid_point(newNode_x, newNode_y, radius, clear):
            return None

    newNode_theta = int(np.rad2deg(newNode_theta)) % 360
    newNode_theta = newNode_theta // 30

    return [int(newNode_x), int(newNode_y), int(newNode_theta)], int(C2G)


def heuristic(node, goal_node):
  return 1.5 * np.sqrt(np.square(goal_node[0] - node[0]) + np.square(goal_node[1] - node[1]))


def inGoal(node, goal_node):
    
    goal_radius = 5
    x_goal = goal_node[0]
    y_goal = goal_node[1]

    x_node = node[0]
    y_node = node[1]
    
    return np.sqrt(np.square(x_node-x_goal) + np.square(y_node-y_goal)) < goal_radius




def a_star_algorithm(start, goal,wheel_rpms, radius, clear, wheel_radius, wheel_distance):
    
    cost_grid = [[[float('inf')] * 12 for _ in range(200)] for _ in range(600)]
    cost_grid[start[0]][start[1]][start[2]] = 0

    parent_grid = [[[None] * 12 for _ in range(200)] for _ in range(600)]
    parent_grid[start[0]][start[1]][start[2]] = None

    visited_grid = [[[False] * 12 for _ in range(200)] for _ in range(600)]
    visited_list = []

    open_queue = PriorityQueue()
    open_queue.put((0, start))  # (priority, node)

    while open_queue:
        element = open_queue.get()
        node = element[1]
        visited_grid[node[0]][node[1]][node[2]//30] = True
        visited_list.append(node)
        
        if inGoal(node, goal):
            return parent_grid, visited_list

        actions = move_star(node, wheel_rpms, radius, clear, wheel_radius, wheel_distance)
        node_cost = cost_grid[node[0]][node[1]][node[2]]

        for action in actions:
            move, move_cost, rpms = action
            x, y, theta = move
            x_index, y_index, theta_index = int(x), int(y), int(theta)
            
            if not visited_grid[x_index][y_index][theta_index]:
                    new_cost = node_cost + move_cost
                    if new_cost < cost_grid[x_index][y_index][theta_index]:
                        cost_grid[x_index][y_index][theta_index] = new_cost
                        priority = new_cost + heuristic([x, y], goal) 
                        open_queue.put((priority, (x, y, theta))) 
                        parent_grid[x_index][y_index][theta_index] = (node, rpms)  

    return parent_grid, visited_list, print("Failed to find goal")


def find_path(parent_grid, visited_list, start):
    current_node = visited_list[-1]
    path = [current_node]
    start_node = start
    while start_node != current_node:
        parent_data = parent_grid[current_node[0]][current_node[1]][current_node[2]]
        temp_node,rpms = parent_data
        path.insert(0, (temp_node,rpms))
        current_node = temp_node
    return path

def animate(start, goal, path, visited_list):
    pygame.init()
    pastel_background = (230, 230, 250)
    dark_pastel_background = (200, 200, 220)
    red = (255, 0, 0)
    black = (0, 0, 0)
    blue = (0, 0, 255)
    white = (255, 255, 255)
    canvas_width = 600
    canvas_height = 200
    canvas = pygame.display.set_mode((canvas_width, canvas_height))
    static_surface = pygame.Surface((canvas_width, canvas_height))
    pygame.display.set_caption("Canvas with Shapes")
    static_surface.fill(pastel_background)
    
    rectangles = [pygame.Rect(150, 0, 25, 100), pygame.Rect(250, 100, 25, 100)]
    
    for rect in rectangles:
        pygame.draw.rect(static_surface, dark_pastel_background, rect)
        
    pygame.draw.circle(static_surface, dark_pastel_background, (420, 80), 60)

    clock = pygame.time.Clock()
    visited_index = 0  
    nodes_per_frame = 50
    path_index = 0
    path_nodes_per_frame = 0
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
                
        canvas.blit(static_surface, (0, 0))
        for i in visited_list[:visited_index]:
            pygame.draw.circle(canvas, white, (int(i[0]), int(200 - i[1])), 1)
        visited_index += nodes_per_frame
        
        if visited_index >= len(visited_list):
            for node_action in path[:path_index]:
                if isinstance(node_action, tuple) and len(node_action) > 0 and isinstance(node_action[0], tuple) and len(node_action[0]) >= 2:
                    node = node_action[0]
                    x, y = node[0], node[1]  
                    pygame.draw.circle(canvas, black, (int(x), 200 - int(y)), 1)
                # else:
                #     print(f"Unexpected structure: {node_action}")
            path_index += path_nodes_per_frame  
            
        pygame.draw.circle(canvas, red, (start[0], 200 - start[1]), 5)
        pygame.draw.circle(canvas, blue, (goal[0], 200 - goal[1]), 5)
        pygame.display.flip()
        clock.tick(60)
    pygame.quit()
    sys.exit()



def main():
    
    clear = round(int(input("Enter the clearance in the canvas: ")))
    clear = abs(clear)
    radius = 22 #cm
    wheel_radius = 3.3 #cm
    wheel_distance = 28.7 #cm
    
    start_x = abs(int(input("Enter the starting coordinate x: ")))
    start_y = abs(int(input("Enter the starting coordinate y: ")))
    start_th = (int(input("Enter the starting orientation in degrees: "))%360)//30
    
    while not (valid_point(start_x,start_y, radius,clear)):
        print("Please try another starting point not in the object area")
        start_x = abs(int(input("Enter the starting coordinate x: ")))
        start_y = abs(int(input("Enter the starting coordinate y: ")))
    
    
    goal_x = abs(int(input("Enter the goal coordinate x: ")))
    goal_y = abs(int(input("Enter the goal coordinate y: ")))
    
    while not (valid_point(goal_x,goal_y,radius,clear)):
        print("Please try another goal point not in the object area")
        goal_x = abs(int(input("Enter the goal coordinate x: ")))
        goal_y = abs(int(input("Enter the goal coordinate y: ")))
    
    RPM1 =  abs(int(input("Enter the Wheel RPM1 ")))
    RPM2 =  abs(int(input("Enter the Wheel RPM2 ")))
    
    start = (start_x,start_y,start_th)
    goal = (goal_x,goal_y)
    wheel_rpms = (RPM1,RPM2)
    
    start_time = datetime.now()
    print('Exploring nodes...')
    explored = a_star_algorithm(start, goal,wheel_rpms, radius, clear, wheel_radius, wheel_distance)
    parent_grid = explored[0]
    visited_list = explored[1]
    
    print('Generating path...')
    path = find_path(parent_grid, visited_list, start)
    print(path)
    end_time = datetime.now()
    time_taken = end_time - start_time
    
    print('Path found in: ', time_taken," seconds")
    # animate(start,goal,path,visited_list)
    with open('path_and_rpms.json', 'w') as file:
        json.dump(path, file)

if __name__=="__main__":
    main()